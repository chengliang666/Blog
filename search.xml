<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title></title>
    <url>%2F20210909%2FGit%E7%89%88%E6%9C%AC%E5%9B%9E%E9%80%80%E4%B9%8B%20reset%20%E5%92%8C%20revert.html</url>
    <content type="text"><![CDATA[layout: posttitle: Git版本回退之 reset 和 revertauthor: chengliang666categories: gittags: git reset revert 版本回退前言 在开发过程中，可能会遇到过错误提交的情况。这种情况下，先不要着急，可以通过以下两个命令来帮助你优雅的实现版本回退。 git reset假如现在有如下几个提交： 其中：A 和 B 是正常提交，而 C 和 D 是错误提交。现在想把 C 和 D 回退掉。而此时HEAD 指针指向 D 提交（5lk4er）。我们只需将 HEAD 指针移动到 B 提交（a0fvf8），即可。 这个时候就可以使用git reset 命令： 12git reset --hard a0fvf8 // 将HEAD指针移动到B提交点git push origin HEAD --force // 将提交强制推到远程仓库 此时HEAD指针就会移动到 B 提交下 采用这种方式回退代码会使 HEAD 指针往回移动，从而会失去之后的提交信息且不可恢复，所以要慎重使用。 git revertgit revert会创建一个新的版本，且HEAD指针会指向这个新生成的版本，原来错误提交信息也可以保留。 可以通过用git revert 命令逐个回退： 12git revert 5lk4ergit revert 76sdeb 回退版本少的可以逐个回退，多的话就要批量回退了： 1git revert OLDER_COMMIT^..NEWER_COMMIT 通过对比发现，git reset 会失去后面的提交，而 git revert 是通过反做的方式重新创建一个新的提交，而保留原有的提交。所以应尽量使用 git revert 命令来回退版本，慎重使用 git reset 命令。 补充假如现在有三个提交，不巧的是那个错误的提交刚好位于中间 此时直接使用 git reset 命令将 HEAD 指针重置到 A 提交显然是不行的，因为 C 提交是正确的，需要保留的。 正确的做法：先把 C 和 B 提交全部回退，再使用 cherry-pick 命令将 C 提交重新再生成一个新的提交 C’’，这样就实现了将 B提交回退的需求。 后续加油♡ 如果大家喜欢记得关注和分享哟❤]]></content>
  </entry>
  <entry>
    <title><![CDATA[Node版本的升级和降级之node版本管理工具nvm]]></title>
    <url>%2F20210811%2FNode%E7%89%88%E6%9C%AC%E7%9A%84%E5%8D%87%E7%BA%A7%E5%92%8C%E9%99%8D%E7%BA%A7%E4%B9%8Bnode%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7nvm.html</url>
    <content type="text"><![CDATA[前言有时候，不同的项目需要使用不同的node版本。我们可以使用nvm管理不同的node版本。 下载安装nvm下载地址下载后解压直接下一步，下一步，安装完成即可 注意：为避免出现bug，安装路径默认即可，如需更改安装路径请注意文件名不要有中文和空格 常用nvm命令查看安装过的node版本 nvm list安装某个node版本 nvm install &lt;version&gt; 使用某个node版本 nvm use&lt;version&gt; 卸载某个node版本 nvm uninstall &lt;version&gt; 后续加油♡ 如果大家喜欢记得关注和分享哟❤]]></content>
      <categories>
        <category>node</category>
      </categories>
      <tags>
        <tag>node</tag>
        <tag>nvm</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[二、Vue 页面渲染过程]]></title>
    <url>%2F20210810%2F%E4%BA%8C%E3%80%81Vue%20%E9%A1%B5%E9%9D%A2%E6%B8%B2%E6%9F%93%E8%BF%87%E7%A8%8B.html</url>
    <content type="text"><![CDATA[前言上篇博文我们依葫芦画瓢已经将hello world 展现在界面上啦，但是是不是感觉新虚虚的，总觉得这么多文件，项目怎么就启动起来了呢？怎么访问到8080 端口就能进入到我们的首页呢。整个的流程是怎么样的呢？ 我也是刚刚接触，所以就会有这样的困惑，所以这篇就简单的理解一下项目页面渲染的过程。 渲染过程我们上篇文章说main.js 是无用的，是废代码，只是起到支撑框架的。但是其实我们应该有感觉，把他删除了整个项目就跑步起来了。其实main.js 算是项目的入口了。我们就从这个文件看起。123456789101112import Vue from 'vue'import App from './App'import router from './router'Vue.config.productionTip = falsenew Vue(&#123; el: '#app', router, components: &#123; App &#125;, template: '&lt;App/&gt;'&#125;) 可以看到代码非常的少，就导入了vue.js、我们的APP.vue 以及index.js第一次做动图，操作像是老年人，大家见谅。上图可以大概的看到引入的三个文件是什么了。Vue.config.productionTip = false 我们这里暂时不管，知道是一个配置信息就可以了，感兴趣的可以百度一下就知道什么意思了。123456new Vue(&#123; el: '#app', router, components: &#123; App &#125;, template: '&lt;App/&gt;'&#125;) 上面这些，如果完全没有vue 语法知识的话，确实不知道什么意思，但是我们看官网教程，起步的时候都是在当个html 文件中使用vue 的。在js 中就会用到这个。可以看到，其实都是差不多的，所以这里的作用就是实例化一个Vue。当然我们项目中，这里是为整个项目实例化了一个Vue ,el 指定的元素，这里就是我们index.html 中的div啦。router 就指定路由，也就是我们在index.js 配置的路由信息。components 指定的组件信息。项目有一个父组件就是APP.vue。我们自己写的所有组件都是在这个父组件之下的。怎么说呢，也就是说所有的界面，最外层的div 就是APP.vue 定义的。div 中其他的div 才是我们自己写的。看下面这个应该就会有所感觉吧。所以这里我们就可以解答上篇文章，为什么我们只是写了一个hello world 。但是为什么界面上呈现的会有图标，还有样式。因为在APP.vue 中设置了这些动洗。我们APP.vue 中的这些内容注释掉就可以看到效果。 我们将APP.vue logo和样式去掉，再来看看内容1234567891011&lt;template&gt; &lt;div id="app"&gt; &lt;router-view/&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default &#123; name: 'App'&#125;&lt;/script&gt; 是不是发现和我们在组件中自己写的Hello.vue 格式完全一样，哈哈没错，vue文件就是这样的格式。可以看到template 渲染的是id 为app 的盒子(div)。这里应该是覆盖了index.html中的d 也为app 的盒子。 所有的 router-view 中的内容，都会被自动替换。script 中的代码则是脚本代码。 至此，整个过程就出来了：项目启动首先会读取main.js 。实例化一个vue,然后渲染APP.vue 文件内容，我们自己写的vue 组件则是通过路由转接到父组件下的。 番外我们项目的流程就讲到这里把，算是对上篇的补充，让我们对项目启动，界面渲染算是有一个大概的了解啦，我们接下来就按照官网上讲一下vue 的一些语法和特性，但是与官网上不同的是，官网上都是一个个的html,而我们就在这个项目的基础的上。将会是一个个的vue 文件。 后续加油♡ 如果大家喜欢记得关注和分享哟❤]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[三、Vue 的一些语法样例]]></title>
    <url>%2F20210810%2F%E4%B8%89%E3%80%81Vue%20%E7%9A%84%E4%B8%80%E4%BA%9B%E8%AF%AD%E6%B3%95%E6%A0%B7%E4%BE%8B.html</url>
    <content type="text"><![CDATA[前言其实vue 的语法在官网上都有详细的讲解和例子，我这里就不多做什么说明，只是把自己学习这些语法是练习的例子贴出来。另外官网上的例子是一个个的html文件。我这里的是一个的vue 文件，通过不同的路由进行访问。类似就上图的这种效果吧，没有什么样式，大伙将就看看嘿嘿。好了，下面我们就一起来看下主题的vue 语法吧。 路由其实不应该先讲路由的，但是想要做这种点击跳转的就是通过路由实现的。其实也很简单，我们只求会用，不求为什要这样吧先。123&lt;router-link :to="&#123;name: 'IfAndFor'&#125;"&gt;条件与循环&lt;/router-link&gt; 可以看到我们通过 router-link 就可以实现跳转。to 表示跳转的地址，name 指跳转的路由。当然这个路由需要我们在src–router–index.js 中配置好，并且有相关的组件才行哟。 我们要新增路由的话，就在index.js 中增加对应配置就好了，然后就可以通过router-link来实现界面见的跳转。 条件与循环我们配置好路由后，现在我们来看看v-if 和v-for 我们新建一个组件如下:12345678910111213141516171819202122232425262728293031323334353637383940414243444546&lt;template xmlns:v-bind="http://www.w3.org/1999/xhtml"&gt; &lt;div&gt; &lt;div id="for"&gt; &lt;p&gt;一&lt;/p&gt; &lt;table&gt; &lt;tr v-for="(value, key, index) in object"&gt; &lt;td v-if="key === 'url'"&gt; &lt;a v-bind:href="value"&gt; &#123;&#123;value&#125;&#125;&lt;/a&gt; &lt;/td&gt; &lt;td v-else&gt; &#123;&#123; value &#125;&#125; &lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;br&gt; &lt;p&gt;二&lt;/p&gt; &lt;ul&gt; &lt;li v-for="(value, key, index) in object"&gt; &#123;&#123; index &#125;&#125;. &#123;&#123; key &#125;&#125; : &#123;&#123; value &#125;&#125; &lt;/li&gt; &lt;/ul&gt; &lt;br&gt; &lt;p&gt;二&lt;/p&gt; &lt;ul&gt; &lt;li v-for="(value, key) in object"&gt; &#123;&#123; key &#125;&#125; : &#123;&#123; value &#125;&#125; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt; export default &#123; name: "", data()&#123; return &#123; object: &#123; name: 'quellanan', url: 'http://quellanan.xyz', slogan: '学的不仅是技术，更是梦想！' &#125; &#125; &#125; &#125;&lt;/script&gt; 可以看到我使用了三种方式进行for 循环。index 是索引，key 是键， value 是值。这些其实和Java 中的循环差不多。无非就是通过索引遍历，要不就是通过键值遍历。 v-if 和v-else-if v-else 也是一样的。满足条件就显示组件，知道这样用就可以。 但是有一点，上面代码也发现了，无论是v-if 还是v-for, 都要与某个标签结合使用。单独是无法使用的。 监听事件听起来很高大上，其实就是一个 watch 方法。我们写一个单位换算的组件:1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889&lt;template&gt; &lt;div&gt; &lt;div style="margin: 20px"&gt; 千米 : &lt;input type = "text" v-model = "kilometers"&gt; 米 : &lt;input type = "text" v-model = "meters"&gt; &lt;p id="info"&gt;&lt;/p&gt; &lt;/div&gt; &lt;div style="margin: 20px"&gt; 小时 : &lt;input type = "text" v-model = "hour"&gt; 分钟 : &lt;input type = "text" v-model = "minute"&gt; 秒 : &lt;input type = "text" v-model = "second"&gt; &lt;br&gt; 天 : &lt;input type = "text" v-model = "day"&gt; &lt;br&gt; 星期 : &lt;input type = "text" v-model = "week"&gt; &lt;/div&gt; &lt;div style="margin: 20px"&gt; &lt;p &gt;计数器: &#123;&#123; counter &#125;&#125;&lt;/p&gt; &lt;button @click = "counter++"&gt;点我&lt;/button&gt; &lt;/div&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt; export default &#123; name: "", data()&#123; return&#123; kilometers : 0, meters:0, second : 0, minute : 0, hour : 0, day : 0, week : 0, counter: 0 &#125; &#125;, watch : &#123; kilometers:function(val) &#123; this.kilometers = val; this.meters = this.kilometers * 1000 &#125;, meters : function (val) &#123; this.kilometers = val/ 1000; this.meters = val; &#125;, week:function(val) &#123; this.week = val; this.day = this.week * 7; this.hour = this.day * 24; this.minute = this.hour * 60; this.second = this.minute * 60; &#125;, day : function (val) &#123; this.day = val; this.week = this.day/7; this.hour = this.day * 24; this.minute = this.hour * 60; this.second = this.minute * 60; &#125;, hour : function (val) &#123; this.hour = val; this.day = this.hour/24; this.week = this.day/7; this.minute = this.hour * 60; this.second = this.minute * 60; &#125;, minute : function (val) &#123; this.minute = val; this.hour = this.minute/60; this.day = this.hour/24; this.week = this.day/7; this.second = this.minute * 60; &#125;, second : function (val) &#123; this.second = val; this.minute = this.second/60; this.hour = this.minute/60; this.day = this.hour/24; this.week = this.day/7; &#125;, counter :function(nval, oval) &#123; //alert('计数器值的变化 :' + oval + ' 变为 ' + nval + '!'); &#125; &#125; &#125;;&lt;/script&gt; v-model 表示数据双向绑定，这个没有什么好说的。data 初始化数据，watch 方法中就是监听函数，监听各自的组件并进行处理。 发送HTTP 请求我们要做前后端分离，那么通过http 请求访问后端数据是避免不了的。所以我们一起来看下。我这里也是查看资料中的例子。直接拿过来用了。我们创建一个BlogList.vue 文件，内容如下：12345678910111213141516171819202122232425262728293031323334353637383940414243444546&lt;template&gt; &lt;div &gt; &lt;table&gt; &lt;tr v-for="blog in blogs"&gt; &lt;!--&lt;td @click='show_blog(blog.id)'&gt;&#123;&#123;blog.title&#125;&#125;&lt;/td&gt;--&gt; &lt;td&gt; &lt;router-link :to="&#123;name: 'Blog', query: &#123;id: blog.id&#125;&#125;"&gt; &#123;&#123;blog.title&#125;&#125; &lt;/router-link&gt; &lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt; export default &#123; data () &#123; return &#123; title: '博客列表页', blogs: [] &#125; &#125;, mounted () &#123; this.$http.get('api/interface/blogs/all').then((response) =&gt; &#123; console.info(response.body) this.blogs = response.body.blogs &#125;, (response) =&gt; &#123; console.error(response) &#125;); &#125;, methods:&#123; show_blog: function(blog_id) &#123; this.$router.push(&#123;name: 'Blog', query: &#123;id: blog_id&#125;&#125;) &#125; &#125; &#125;&lt;/script&gt;&lt;style &gt; td &#123; border-bottom: 1px solid grey; &#125;&lt;/style&gt; 上面的代码可以看到。mounted 方法中发送http 请求。mounted 函数是初始化页面后，将数据渲染到界面上的。1234567mounted () &#123; this.$http.get('api/interface/blogs/all').then((response) =&gt; &#123; this.blogs = response.body.blogs &#125;, (response) =&gt; &#123; console.error(response) &#125;);&#125;, 我们启动项目，发现报这种错误。这是因为我们项目中没有引入 vue-resource 所以我们需要在项目中引入。 我们在idea 中打开控制台（alt+F12）。1npm install vue-resource 安装好之后，我们在在main.js 中引入它123import VueResource from 'vue-resource'Vue.use(VueResource)Vue.http.options.emulateJSON = true //允许使用post 请求。 在config–index.js 中设置一下代理，模拟一下跨域请求，不然接口访问不了。123456789proxyTable: &#123; '/api': &#123; // 1. 对于所有以 "/api" 开头的url 做处理． target: 'http://siwei.me', // 3. 转发到 siwei.me 上． changeOrigin: true, pathRewrite: &#123; '^/api': '' // 2. 把url中的 "/api" 去掉． &#125; &#125; &#125;, 好了，我们启动看一下，后面是获取详情的，上面没有传递参数，获取详情需要传递参数，代码如下：1234567891011121314151617181920212223242526272829303132&lt;template&gt; &lt;div &gt; &lt;div&gt; &lt;p&gt; 标题： &#123;&#123; blog.title &#125;&#125; &lt;/p&gt; &lt;p&gt; 发布于： &#123;&#123;blog.created_at &#125;&#125;&lt;/p&gt; &lt;div&gt; &lt;div v-html='blog.body'&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt; export default &#123; data () &#123; return &#123; blog: &#123;&#125; &#125; &#125;, mounted() &#123; this.$http.get('api/interface/blogs/show?id='+this.$route.query.id).then((response) =&gt; &#123; this.blog = response.body.result &#125;, (response) =&gt; &#123; console.error(response) &#125;); &#125; &#125;&lt;/script&gt;&lt;style scoped&gt;&lt;/style&gt; 这是别人的接口，好像不支持post 请求。所以post 请求就先算了，并且这种算是原生的http 请求吧，我们以后使用的时候，可以使用 axios 来发送http 请求。这个我们后面再尝试。 番外 这篇就讲到这吧，都是一些例子。如果要看语法的话，还得看看官网的教程。 后续加油♡ 如果大家喜欢记得关注和分享哟❤]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[一、Vue 世界初探]]></title>
    <url>%2F20210810%2F%E4%B8%80%E3%80%81Vue%20%E4%B8%96%E7%95%8C%E5%88%9D%E6%8E%A2.html</url>
    <content type="text"><![CDATA[前言此文对于前端小白，或者刚入门的后端开发学习。 学习地址想要了解vue 是什么， 怎么学习？我也是参考网上的资料学习的。 vue.js 的官网：https://cn.vuejs.org/v2/guide/ 菜鸟教程：https://www.runoob.com/vue2/vue-tutorial.html gitBook: http://vue_book.siwei.me/preface.html 自己感觉官网上和菜鸟教程上，对自己的作用只是熟悉的了vue的语法，不足以我来搭建在项目中使用，但是又不能不看，不然基本的语法都不知道，怎么开展下一步。上面的gitBook 算是带我入门的，我也在网上找了很多资料，但是跟着gitBook一步步实现起来，整体流程算是清楚了，所以也推荐大家。自己记录这系列博客，也算自己vue入门吧，有不对的地方大家多多指教。 安装好啦，说了这么多，我们正式开始吧。我们直接使用vue-cli .当然大家亦可以使用其他的。我们首先电脑上 npm和git 并配置邮箱 ,至于怎么安装，网上有很多教程，这里就不说了，安装好之后，我们需要安装vue-cli 。1npm install vue vue-cli -g 安装好之后，我们控制台我们想要创建项目的目录执行：1vue init webpack zlflovemmVue 这样就可以看到项目已经初始化成功了。我们现在用IDEA 打开这个项目，当然大家也可以用其他的，后端的用惯了idea ,所以也就用idea 来开发vue 啦。 IDEA 配置vue我们既然使用idea,当然需要一些配置，不使用idea 的可以忽略。1、我们打开settings 下载vue.js 插件，然后重启。打开我们创建的项目zlflovemmVue 2、配置js 版本 ECMAScript6 3、HTML 增加 .vue 支持 4、启动项目，在edit Configurations 中增加npm 启动，配置如下图： 配置好后，我们来启动就好啦，如下图就表示启动成功啦。 我们启动成后，在浏览器上输入： 1http://localhost:8081 证明我们项目已经初始化搭建完成啦。到这里我们已经完成了第一步。但是可以看到我们到现在为止还没有开始写代码，也不知道如何下手写。 不要急，我们前面这些工作做好后，我们接下来就开始啦。 项目结构 虽然我们项目稀里糊涂的启动起来了，但是相比到此的小伙伴还是一头雾水，在那写我们的代码呢？整个流程是怎么样的呢？在写代码之前，我们还是先来看看，vue-cli 初始化为我们创建的项目有哪些东西。12345678▸ build/ // 编译用到的脚本▸ config/ // 各种配置▸ dist/ // 打包后的文件夹▸ node_modules/ // node第三方包▸ src/ // 源代码▸ static/ // 静态文件, 暂时无用 index.html // 最外层文件 package.json // node项目配置文件 build保留各种打包脚本。不可或缺，不要随意修改。 展开后如下：12345678910▾ build/ build.js //打包使用， 不要修改。 check-versions.js //检查npm的版本， 不要修改。 dev-client.js //是在开发时使用的服务器脚本。不要修改。 dev-server.js //同上 utils.js // 不要修改。 做一些css/sass 等文件的生成。 vue-loader.conf.js //非常重要的配置文件，不要修改。内容是用来辅助加载vuejs用到的css source map等内容。 webpack.base.conf.js //下面这三个都是基本的配置文件。不要修改 webpack.dev.conf.js webpack.prod.conf.js 我们初学者阶段，暂时不用管这些，也不改这些东西。 config上图我们可以看到config 目录中就有12345▾ config/ dev.env.js index.js prod.env.js test.env.js dev.env.js 开发模式下的配置文件，一般不用修改。prod.env.js 生产模式下的配置文件，一般不用修改。test.env.js 测试模式下的配置文件，一般不用修改。index.js 很重要的文件， 定义了 开发时的端口（默认是8080），定义了图片文件夹（默认static)， 定义了开发模式下的 代理服务器. 我们修改的还是比较多的。 node_modulesnode项目所用到的第三方包，特别多，特别大。 $ npm install 所产生。这个文件夹不要放到git中 src最最核心的源代码所在的目录。我们要写的代码就是写在这个里面啦。123456789▾ src/ ▾ assets/ logo.png ▾ components/ Hello.vue ▾ router/ index.js App.vue main.js assets: 用到的图片 components: 用到的”视图”和”组件”所在的文件夹。（最最核心） router/index.js 路由文件。 定义了各个页面对应的url. App.vue 如果index.html 是一级页面模板的话，这个App.vue就是二级页面模板。 所有的其他vuejs页面，都作为该模板的 一部分被渲染出来。 main.js 废代码。没有实际意义，但是为了支撑整个vuejs框架，存在很必要。 Hello World好啦，我们已经知道了项目的结构了，现在就要开始实现我们自己的hello world 啦。不然我们当程序员还有什么意义。其实我们程序已经帮我们写了一个helloworld 。但是我们还是自己来创建一个，这样自己才能熟悉点。最终添加的内容图如下： Hello.vue我们在src–components 新建Hello.vue 。内容如下:123456789101112131415&lt;template&gt; &lt;div&gt; &#123;&#123;message&#125;&#125; &lt;/div&gt;&lt;/template&gt;&lt;script&gt; export default &#123; data()&#123; return &#123; message: "hello world" &#125; &#125; &#125;&lt;/style&gt; 可以看到内容很简单，就是返回一个hello world 。 修改index.js接下来我们在src–router–index.js 中增加一个路由。 启动这样的话我们就可以来启动项目啦。启动的时候报这种错误：1✘ http://eslint.org/docs/rules/indent 启用eslint检测不通过导致的，我们这里的解决办法： 在build/webpack.base.conf.js文件中，注释config.dev.useEslint?这行配置，然后重启项目就好了。 启动之后，我们在界面上输入： 1http://localhost:8081/#/hello 这里我们的hello world 出来了，但是我们可能会感觉到奇怪，我们只是仅仅写了helloworld 为什么还有logo ,并且还有居中的样式。我们这个问题留在下篇文章接着将。这里我们先记着。 番外 到此为止，我们也算是将vue安装成功了，并运行一个非常简单的例子。 后续加油♡ 如果大家喜欢记得关注和分享哟❤]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>前端</tag>
      </tags>
  </entry>
</search>
